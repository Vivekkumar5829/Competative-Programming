// 1. 2769. Find the Maximum Achievable Number.
int theMaximumAchievableX(int num, int t) {
        return num + 2 * t;

}


// 2. 2469. Convert the Temperature.
vector<double> convertTemperature(double celsius){
	vector<double> ans;

	ans.push_back(celsius + 273.15);
	ans.push_back(celsius * 1.80 + 32.00);

	return ans;
}


// 3. 3190. Find Minimum Operations to Make All Elements Divisible by Three.
int minimumOperations(vector<int>& num){

	int result = 0;
	for(int i = 0; i < num.size(); i++){
		if(num[i] % 3 != 0){
			result++;
		}
	}

	return result;

}


// 4. Number of good Pairs.
int numIdenticalPairs(vector<int>& nums){
	int result = 0;

	for(int i = 0; i < nums.size(); i++){
		for(int j = i + 1; j < nums.size(); j++){
			if(nums[i] == nums[j]){
				result++;
			}
		}
	}
	return result;
}


// 5. 2894. Divisible and Non-divisible Sums Difference
int differenceOfSums(int n, int m) {
        	
    int num1 = 0;
    int num2 = 0;

    for(int i = 1; i <= n; i++){
    	if(i % m != 0){
    		num1 += i;
    	}else{
    		num2 += i;
    	}
    }
	return num1 - num2;
}


// 6. 2235. Add Two Integers.
int sum(num1, num2){
	return num1 + num2;
}


// 7. 2413. Smallest Even Multiple.
int smallestEvenMultiple(int n){

	if(n % 2 == 0){
		return n;
	}
	return 2 * n;

}


// 8. // 8. 1281. Subtract the Product and Sum of Digits of an Integer.
int subtractProductAndSum(int n){

	int product = 1;
	int sum = 0;
	while(n > 0){
		int remainder = n % 10;
		n = n / 10;

		product *= remainder;
		sum += remainder;

	}

	return product - sum;
}


// 9. 2160. Minimum Sum of Four Digit Number After Splitting Digits.
int minimumSum(int num){
	int digit = num;vector<int> v;
        while(digit!=0)
        {
            int temp = digit%10;
            v.push_back(temp);
            digit = digit/10;
        }
        sort(v.begin(),v.end());

        int num1 = v[0]*10 + v[2];
        int num2 = v[1]*10 + v[3];

        int sum = num1 + num2;
        return sum;

}

// 10. 1688. Count of Matches in Tournament.
int numberOfMatches(int n){
	int matchesPlayed = 0;

	while(n > 1){
		if(n % 2 != 0){
			matchesPlayed += (n - 1) / 2;
			n = (n - 1) / 2 + 1;
		}else{
			matchesPlayed += n / 2;
			n = n / 2;
		}
	}

	return matchesPlayed;
}


// 17.07.2024
// 11. 2652. Sum Multiples.
int sumOfMultiples(int n){

	int result = 0;
	for(int i = 1; i <= n; i++){
		if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0 ){
			result += i;
		}
	}

	return result;

}


// 12.1342. Number of Steps to Reduce a Number to Zero.
int numberOfSteps(int n){

	int result = 0;
	while(n > 0){
		if(n % 2 == 0){
			result++;
			n /= 2;
		}else{
			result++;
			n -= 1;
		}
	}

	return result;

}

//13. 2520. Count the Digits That Divide a Number.
int countDigits(int num){

	int digits = num;
	int result = 0;

	while(digits > 0){
		int remainder = digits % 10;
		digits = digits / 10;
		if(num % remainder == 0){
			result++;
		}
	}

	return result;
}


// 14. 2535. Difference Between Element Sum and Digit Sum of an Array.
int differenceOfSums(vector<int>& nums){

	int sum = 0;
	int sum2 = 0;

	for(int i = 0; i < nums.size(); i++){

		sum += nums[i];

		while(nums[i] > 0){
			int remainder = nums[i] % 10;
			sum2 += remainder;
			nums[i] /= 10;

		}

	}
	
	return abs(sum - sum2);

}

// 15. 2485. Find the Pivot Integer.
int pivotInteger(int n){

	int temp = 0;
	int finalSum = 0;

	for(int i = 1; i <= n; i++){
		
		finalSum += i;
	}
	for(int i = 1; i <=n; i++){
		temp += i;
		if(finalSum == temp){
			return i;
		}
		finalSum -= i;
	}

	return -1;

}

// 16. 1323. Maximum 69 Number.
int maximum69Number(int num){

	string temp = to_string(num);
        for(int i=0;i<temp.length();i++){
            if(temp[i]=='6'){
                temp[i]='9';
                break;
            }
        }

        return stoi(temp);
	}



// 18. 2427. Number of Common Factors.
    int commanFactors(int a, int b){

    	int maximum = max(a, b);
    	int result = 0;

    	for(int i = 1; i <= maximum; i++){
    		if(a % i == 0 && b % i == 0){
    			result++;
    		}
    	}

    	return result;

    }
